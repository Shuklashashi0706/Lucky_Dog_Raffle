import Referral from "../models/referral"; // Ensure this path is correct for your project structure

// Function to handle creating a raffle with a referral
export const handleCreateRaffleWithReferral = async (ctx, walletAddress) => {
  // Ask the user to enter the referral code
  ctx.reply("Enter your referral code:");

  // Wait for the user input
  ctx.once("text", async (ctx) => {
    const referralCode = ctx.message.text;

    // Validate the referral code
    const isValid = await validateReferralCode(referralCode, ctx.from.id);

    if (isValid) {
      // Proceed with raffle creation if the referral code is valid
      await createRaffle(ctx, walletAddress, referralCode);
    } else {
      // Handle invalid referral code
      await handleInvalidReferralCode(ctx, walletAddress);
    }
  });
};

// Function to validate the referral code
export const validateReferralCode = async (referralCode, userId) => {
  try {
    const referral = await Referral.findOne({ userId, referralCode });
    return referral ? true : false;
  } catch (error) {
    console.error("Error validating referral code:", error);
    return false;
  }
};

// Function to handle raffle creation when referral code is valid
const handleValidReferralCode = async (ctx, walletAddress, referralCode) => {
  try {
    // Proceed with raffle creation using the valid referral code
    await createRaffle(ctx, walletAddress, referralCode);
    ctx.reply("Raffle created successfully with referral code!");
  } catch (error) {
    console.error("Error creating raffle:", error);
    ctx.reply("Failed to create raffle with the referral code. Please try again.");
  }
};

// Function to handle invalid referral code response
const handleInvalidReferralCode = async (ctx, walletAddress) => {
  ctx.reply("Referral code is invalid. Please choose an option:", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "Enter again", callback_data: "enter_referral_again" }],
        [{ text: "Proceed without referral code", callback_data: "proceed_without_referral" }],
      ],
    },
  });

  // Handle "Enter again" option
  ctx.action("enter_referral_again", async () => {
    await handleCreateRaffleWithReferral(ctx, walletAddress); // Restart the referral input flow
  });

  // Handle "Proceed without referral" option
  ctx.action("proceed_without_referral", async () => {
    await handleCreateRaffleWithoutReferral(ctx, walletAddress); // Proceed without referral
  });
};

// Function to handle creating a raffle without a referral code
export const handleCreateRaffleWithoutReferral = async (ctx, walletAddress) => {
  try {
    // Proceed with raffle creation without a referral code
    await createRaffle(ctx, walletAddress, ethers.constants.AddressZero); // Default referrer to zero address
    ctx.reply("Raffle created successfully without referral code!");
  } catch (error) {
    console.error("Error creating raffle:", error);
    ctx.reply("Failed to create raffle without the referral code. Please try again.");
  }
};
